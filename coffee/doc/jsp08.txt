MVC 패턴
==> Web 문서를 만드는 발전된 기술의 하나로
	중간에 WAS 서버를 이용해서 분산 처리하는 기술
	
	JSP 문서가 실행되는 순서
		1. 서버는 클라이언트의 요청을 분석해서 해당 문서를 실행하고
			(디스패치 시킨다.)
		2. JSP는 뭔가를 실행해서 데이터를 생산하고(데이터 처리)
		3. 클라이언트에 응답하는 문서를 작성하고
		4. 작성된 문서를 응답한다.
		
	이들 과정을 서버 혼자서 담당해야 한다.
	(그래서 중간에 스레드를 자동적으로 처리해서 여러 클라이언트들에게
		동시에 응답하도록 시스템 자체가 만들어져 있다.)
		
	따라서 문제가 접속율이 높으면 서버가 다운되는 현상이 생길 수 있고
	이 문제를 해결하기 위해서 서버의 크기가 점점 커지는 현상이 생겼다.
	요사이는 개인 서버를 운영하는 경우도 생겨났고
	그 사람들이 서버를 완벽하게 구축 할 수 없는 경우가 생겨났다.(몇년전 이야기...)
	
	이처럼 작은 서버가 담당할 수 있는 프로그램 기법이 필요했다.
	
	이것을 해결하기 위해서 나온 기법이 바로 분산 시스템이다.
	이 분산 시스템의 하나로 제시된 방법이 바로 MVC 패턴이다.
	
	참고 ]
		컴퓨터가 뭔가 프로그램을 실행하면 그 프로그램에
		그 컴퓨터가 가진 모든 자원을 제공하는 것은 아니다.
		서버 역시 프로그램의 일종이다.
		따라서 대형컴퓨터를 사용한다고 해서
		서버가 그 대형 컴퓨터의 자원을 100% 사용할 수 있는 것은 아니다.
		
		분산 시스템이 필요한 이유는 
		여러개의 프로그램을 동시에 실행해서 각각의 일을 전담하게 함으로 해서
			시스템의 자원을 사용하는 비율을 늘리면서
			그 프로그램이 하는 일은 줄어들게 된다.
		따라서 결론적으로
			전체적으로 각각의 프로그램이 부하를 줄이면서
			문제를 해결할 수 있게된다.
			
참고 ]
	
	Model
		==> 생산된 데이터를 관리하는 기능을 담당한다.
			(컨트롤러와 뷰사이에 데이터를 주고 받는 기능)
			또는
			데이터 자체를 이야기하기도 한다.
			
	View
		==> 생선된 데이터를 이용해서 응답 문서를 작성하는 기능을 담당한다.
			우리의 경우는 JSP 파일을 의미한다.
			
	Controller
		==> 데이터를 생산하는 기능을 담당한다.
			(클라이언트의 요청에 따라 무넺를 해결하는 기능을 담당한다.)
			
			1. Dispatch Controller
				==> 서블릿으로 제작하는 것으로
					하는 역할은 클라이언트가 요청하면
					그 요청 내용을 분석해서
					필요한 컨트롤러와 뷰를 호출하도록 하는 역할
					(즉, 컨트롤 타워의 역할)을 담당하는 기능을 한다.
					
			2. 일반 컨트롤러
				==> 실제로 데이터를 생산하는 컨트롤러
					우리가 아는 자바 클래스로 제작하면 된다.
					그것은 서버가 실행하는 것이 아니고
					JVM이 실행하게 된다.
					
정리 ]
	1. 클라이언트가 요청하면 특정 URL-pattern에 의해서 디스패치 서블릿을 실행한다.
	
	2. 디스패치 서블릿은 클라이언트의 요청을 분석한 후
		그 문제를 해결할 컨트롤러를 실행한다.
		
	3. 컨트롤러는 문제를 해결한 후 데이터를 생산하게 된다.
	
	4. 생산된 데이터는 request 영역에 입력하여 뷰에게 보내게 된다.
	
	5. 뷰는 컨트롤러가 생산한 데이터를 이용해서 응답할 문서를 제작한다.
	
------------------------------------------------------------------------------------------

Dispatch Controller 구현
	==> 디스패치 서블릿은 하나의 WAS의 역할을 하는 것으로써
		클라이언트의 요청을 분석해서 그 결과를 이용해서
		원하는 작업(원하는 컨트롤러)를 실행할 수 있도록
		컨트롤 타워 역할을 해주는 것이다
		
		그런데
		request 객체는 클라이언트의 요청에 대한 정보를 관리하는 객체이다.
		이 객체를 이용하면 클라이언트의 요청을 알아낼 수 있으며
		이것을 이용해서 클라이언트가 무엇을 요청했는지 알 수 있게 된다.
		
	준비사항 ]
		com.increpas.coffee.resources 패키지에
		Cafe.properties 파일을 준비한다.
		주의 사항 ]
			Properties 파일은
			한글 처리시 문제가 발생할 수 있다.
			그리고 입력된 내용을 모두 문자열로 처리하기 때문에
			공백을 특히 조심해야 한다.
			
		우리는 이 파일에
		요청내용과 실행할 클래스를 정의해줄 예정이다. 
			
			
			
			
			
			
			
			
			