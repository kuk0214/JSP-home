로그인 처리
==> 로그인 처리는
	로그인을 한 사실을 세션에 UID라는 기록이 남아있는가를 가지고 처리 한다.
	따라서 만약 UID 라는 기록이 없어지면???
	
	다시 로그인 폼으로 돌려보내야 된다.
	
중요 ]
	HTTP 프로토콜(Web 처리)은 단절형 네트워크 방식이다.
	즉, 클라이언트가 요청하면 서버는 응답을 한 후
	그 즉시 클라이언트와의 접속을 끊는다.
	==> 서버는 클라이언트를 관리할 수 없는 상태가 된다.
		(==> 지금 요청을 하는 클라이언트가
			 로그인을 한 클라이언트인지 서버 입장에서는 구분할 수 없다.)
	
	따라서 클라이언트가 준 데이터는 한번만 받을 수 있게 된다.
	
	그래서 해결방법으로
	1. 클라이언트가 접속할 때 마다 고유한 자신만의 번호를 서버에게 알려주기로 약속한다.
		
		이 때 알려주는 고유한 자신만의 번호 : "세션 ID" 라고 부르기로 한다.
	
	2. 만약 클라이언트가 세션 ID가 없으면 서버는 
		새로운 세션 ID를 발급해 주도록 약속 했다.
		
	3. 이 안에는 필요한 내용을 기록해 놓을 수 있도록 한다.
	
	4. 따라서 세션을 보면(수첩을 보면)
		그 클라이언트의 정보를 파악할 수 있게 되므로...
		단절형 네트워크임에도 불구하고 클라이언트를 관리할 수 있게된다.
		
참고 ]
	세션 ID는 생명주기를 가지고 있다.
		1. 웹브라우저를 종료하면 세션 ID가 사라진다.
			(수첩이 없어진다.)
		2. 서버가 세션의 생명을 조절할 수 있다.
		
참고 ]
	session
	==> 세션(수첩)을 관리하는 내장 객체
		session.getId();	==> 수첩앞에 쓰여있는 고객코드를 알아내는 함수
		
	주요함수 ]
		setAttribute("키값", 데이터);
		수첩에 정보를 기록하는 함수
		getAttribute("키값);
		==> 수첩에 기록된 정보를 꺼내서 확인하는 함수
		removeAttribute("키값");
		==> 수첩에 기록된 정보를 삭제하는 함수
		
		참고 ]
			세션에 기억되는 데이터는 모두 Object 타입으로 기억된다.
		
		참고 ]
			setMaxInactiveInterval(int interval)
			==> 세션의 생존 주기를 결정하는 함수
				입력단위는 초단위로 입력...