# jsp02

JSP란?
	==> Web 서버가 클라이언트에게 응답하기 위해 필요한 문서(html문서)를
		만들어주는 언어의 일종이다.
		
		Web Server가 가진 엔진이 실행할 수 있는 언어가 따로 있다.
		이것을 우리는 Server Side Page(SSP)라고 말한다.
		
		예 ]
			
			대표적으로
			ASP(Active Server Page)
			==> Visual Basic 이라는 언어를 기본
			
			ASP.NET
			==> C#을 기본
			
			PHP
			==> CGI 언어를 배경으로해서 만들어진 새로운 언어
			
			JSP(Java Server Page)
			==> Java 언어를 기본
			
	결론적으로
		우리가 앞으로 배우는 내용은
		서버가 실행해서 클라이언트에게 응답하는 응답문서를 만들기위한
		언어를 배우는 것이 된다.
		

환경 설정
	
	1. Web (Application) Server 를 설치한다.
		==> HTTP 프로토콜에 의해서 클라이언트의 요청을 받아서 해결하는
			서버를 부르는 말이다.
			
			예 ] 
				톰캣, 레진, IIS, 아파치, .....
				
		우리는 톰캣을 설치해서 운영하도록 한다.
		
		설치 방법 ]
			
			1. 압축 파일을 다운받는다. ( 8.5.xx)
				==> https://tomcat.apache.org
			2. 압축파일을 원하는 위치에 해제한다.
			3. 환경변수를 설정하고
				Path에 등록해준다.
				
				만들어야 할 환경변수 ]
					CATALINA_BASE, CATALINA_HOME
					
				Path에 등록 ]
					%CATALINA_BASE%\bin\
					
		참고 ]
			환경변수가 준비되고 패스에 등록이 되면 
			톰캣에 포함된 명령들은 어느위치에서든지 사용할 수 있게 된다.
			이때 톰캣이 제대로 준비되었는지 확인하는 방법은
				version.bat
			을 cmd 창에서 실행시켜서 버젼이 출력되는지 확인해보면 된다.
					
	2. 프로그램 편집을 위한 편집기( 통합개발환경: IDE - 이클립스 ) 설치
		
		방법 ]
			1. 이클립스 홈페이지에서 
				2020.06 버젼의 엔터프라이즈 자바 디벨로퍼 에디션(jee)을 다운받는다.
				
			2. 프로젝트 폴더에 app라는 폴더를 만들고 그 폴더에 저장하고 압축을 해제한다.
			3. 워크스페이스(작업공간)는 프로젝트 폴더에 source라는 폴더를 만들고
				그 폴더로 지정한다.
				
			4. 프로젝트를 만든다.
				(웹사이트 한개를 개발하기 위한 프로젝트이다.)
				1) File - New - Other - Web 폴더 펼치고
				2) Dynamic Web Project를 선택한다.
				3) 프로젝트 이름을 지정하고
				4) Dynamic Web Module 을 3.1로 지정한다.
				
	3. 프로젝트와 웹 서버를 연결
		==> 현재 진행중인 프로젝트 안에 소스가 어떤 웸서버의 처리를 
			담당할지를 지정하는 것
			
		연결 방법 ]
			1. Window - Show View - Servers를 선택...
			2. 아직 서버와 연결이 되지 않은 상태이므로
				서버리스트에 서버가 없게 된다.
				
				New - Server 메뉴를 선택한다.
				
			3. 서버를 선택한다.
				우리의 경우
				Apache - Tomcat8.5 를 선택한다.
				
			4. Tomcat installation directory를 압축을 풀어서 설치해놓은 
				톰캣 폴더를 지정한다.
			5. 프로젝트 리스트의 프로젝트중 서버 추가할 프로젝트를 선택해서
				add 버튼을 클릭해서 서버에 프로젝트를 추가해준다.
				
	4. JSP에서 사용할 외부 라이브러를 설치한다.
		==> 톰캣에서 제공하는 라이브러리를 JSP에서 사용하도록 만들어 주는 것이 된다.
		
		참고 ]
			먼저 톰캣이 설치된 폴더의 lib 폴더에서
				jsp-api.jar, servlet-api.jar
			찾아서 복사하고 
			WEB-INF/lib 폴더에 복사해둔다.
		
		1) 프로젝트를 선택해서 마우스 오른쪽 버튼을 클릭하고
			Properties 메뉴를 선택한다.
		2) 왼쪽화면에서 Java Build Path 를 선택한다.
		3) 오른쪽 화면에서 Libraries 탭을 선택하고
		4) 오른쪽 버튼중 Add External JARs를 선택한다.
		5) 톰캣이 제공하는 jsp-api.jar, servlet-api.jar 를 선택한다.
		
		
		참고 ]
			프로젝트가 만들어지면 이클립스의 기본 설정으로 
			프로젝트가 셋팅이 된다.
			이때 우리가 원하는 설정으로 셋팅하려면 
			프로젝트를 선택하고 마우스 오른쪽 버튼을 클릭해서 
			Properties 메뉴를 선택하고
			왼쪽의 메뉴중 
				Project Facets
			을 선택해서 버젼들을 우리의 환경에 맞춰야 한다. 
---------------------------------------------------------------------------

여기까지가 기본 셋팅이다.
참고로 모든 개발은 환경 셋팅부터 시작하게 된다.
따라서 프로젝트에 참여를 하려면 개발환경 셋팅이 되어야 할 것이고
이것이 안되면 프로젝트에 참여를 할 수 없게 된다.

여러분들은 위의 과정을 혼자서 다른사람의 도움 없이 할 수 있도록 
연습이 되어야할 것이다.		

---------------------------------------------------------------------------
---------------------------------------------------------------------------
프로젝트 폴더 구조
	
	1. Java Resource
		==> JSP가 사용할 자바적인 요소(클래스)를 코딩하는 위치
			Java Resource/src/
			하위에 패키지를 만들고
			그 안에 필요한 클래스를 만들어서 사용하면 된다.
			
	2. WebContent
		==> 이 위치가 실제 JSP, HTML 문서나 JS, CSS 등 
			응답에 필요한 문서를 작성하는 위치
			
			WebContent
			==> 웹서버에 직접 요청하는 문서를 저장하는 폴더
			
			WebContent/WEB-INF
			==> Servlet 프로그램에 의해서 요청하는 문서를 저장할 폴더
			
		참고 ]
			서블릿
				서버 애플릿 의 약자로 서버에서 실행되는 애플릿을 의미한다.
				서블릿의 역할은 
				사용자가 요청하는 요청내용에 따라서 
				응답문서를 만들어서 응답해주는 역할을 한다.
				
				
---------------------------------------------------------------------------
서버 환경 설정
	서버의 환경은 xml 파일을 이용해서 환경을 설정하도록 하고 있다.
	
	참고 ]
		XML 파일?
		(eXtension Markup Language의 약자)
		==> 확장성이 있는 마크업 언어
		
		태그를 이용해서 파일의 내용을 구분하도록 만들어지는 문서를 의미하며
		이 중에 하나가 HTML(Hyper Text Markup Language) 문서이다.
		
		이때 HTML의 경우는 사용하는 태그가 이미 결정되어 있지만...
		xml은 사용자가 태그의 종류를 정한 후
		그 태그를 이용해서 문서를 만드는 것을 말한다.
		
		이 문서는 주로 프로그램의 환경 설정을 하기 위한 목적으로
		많이 사용되는 문서이다.
		(참고 - 데이터 전송용으로도 많이 사용한다.)
		
		프로그램은 프로그램을 실행하기 전에
		먼저 XML파일을 읽은 후
		그 파일의 태그를 분석한다.
		==> 이 작업을 우리는 파싱 시킨다. 라고 표현한다.
		
		그리고 그 파싱된 결과를 프로그램에서 이용하도록 하는 절차를 가진다.
		
		***
		결론적으로 어떤 프로그램의 실행 환경(시작환경)을 바꾸고 싶으면...
		우리는 xml파일에서 그 환경을 설정하는 부분을 찾아서
		수정하면 된다.
		
		참고 ]
			파싱을 하기 위해서는 그 xml 문서에 있는 태그의 의미를 알아야 한다.
			xml 문서를 만드는 사람이 태그의 순서, 의미를 지정하는 문서가 따로 존재한다.
			이 문서를 "DTD" 혹은 "스키마 문서" 라고 한다.
			
			
환경 설정
	1. Welcome 파일 수정하기
		Welcome 파일이란?
		클라이언트가 파일의 이름을 지정하지 않아도
		자동으로 응답할 파일을 말하는 것이다.
		
		방법 ]
			1) web.xml 파일에서
			2) <welcome-file-list> 의 내용을 수정하면 된다.
			
---------------------------------------------------------------------------------------
참고 ]
XML 문서
	
	문서의 첫행을 반드시
		<?xml version="1.0" encoding="UTF-8"?>
	로 시작해야 한다.
	루트태그는 반드시 하나여야만 한다.
	하위태그는 중복해서 여러개가 와도 상관없다.	

---------------------------------------------------------------------------------------
접속 프로젝트 이름 바꾸기
	==> 만약 프로젝트 이름을 노출하기 싫으면 접속 프로젝트를 변경할 수 있다.
	
	방법 ]
		1. server.xml 파일을 연다.
		2. <Context docBase="coffee" path="/coffee" reloadable="true" source="org.eclipse.jst.jee.server:coffee"/>
			에서 path 부분을 수정하면 된다.
		
---------------------------------------------------------------------------------------
포트 번호 바꾸기
	==> HTTP 프로토콜이 사용하는 기본포트는 80 포트이다.
		따라서 서비스를 요청할 때 따로 포트를 기술하지 않으면
		기본포트를 사용해서 요청하게 되고 기본포트를 사용해서 응답하게 된다.
		
		그런데 경우에 따라서는 포트가 충돌이 날 경우가 생기기 때문에
		이런 경우는 포트번호를 변경해야 한다.
		톰캣의 경우는 톰캣이 웹서버가 아니고
		웹 어플리케이션 서버이기 때문에 기본 포트를 8080으로 기본 설정이 되어있다.
		따라서 필요한 경우는 이 포트를 변경해서 사용하면 된다.
		
		방법 ]
			1. server.xml 파일을 연다.
			2. <Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>
				태그를 찾아서
					port="8080" 의 숫자 부분을 수정하면 된다.
					
중요 ]
	JSP 테스트는 서버에서 응답하는 문서를 만드는 것이므로...
	반드시 서버를 기동하고
	클라이언트가 요청해서 테스트가 되어야 한다.
	
결론적으로
	앞으로 우리는 웹 서버가 실행해서 클라이언트에게 응답하는
	문서(html 문서)를 만드는 방법에 대해서 공부할 것이다.
	
	따라서 테스트는 반드시 클라이언트의 요청에 의해서
	응답 받는 방식으로 테스트를 해야만 한다.
	반드시 웹 브라우저에서 서버에게 요청하는 방식으로
	테스트가 이루어져야 한다.
	
	형식 ]
		http://localhost/cafe/?????? 

========================================================================================

JSP 구조
	JSP는 응답문서(주로 HTML 문서) 를 만들기 위한 언어의 일종이다.
	
	따라서 HTML 문서가 중심이 되고
	그 가운데 필요하면 자바적인 요소가 포함 될 수 있다.
	따라서 결론적으로 JSP는 자바적인 요소를 포함할 수 있는
	스크립트 언어이다.
	
	HTML과의 차이점
		HTML은 서버측에서 실행이 불가능하고
		오직 클라이언트측에서 실행이 가능한 언어이다.
		==> 오직 이미 준비된 문서를 단순히 응답하는 것일 뿐
			내용 변화를 시킬 수 없다.
			
		JSP는 서버측에서 실행할 수 있는 언어이다.
		==> 요청이 올떄마다 서버측에서 실행을 해서
			새로운 HTML문서를 제작할 수 있다.
			따라서 요청이 올때마다 내용 변화를 시킬 수 있다.

========================================================================================
			
JSP  구조에서 반드시 알아야 할 내용
==> 자바적인 요소를 어떤 방식으로 HTML 문서에 포험시킬 것인지...

지시자
==> JSP 문서의 특성이나 처리방식을 지시하는 명령을 말한다.

	형식 ]
		<%@ 명령어 속성=속성값 속성=속성값 ... %>
		
		명령어의 종류 ]
		
			page	-	문서 자체의 특성이나 처리방식을 지시하는 명령
			include	-	문서 내부에 다른 문서를 포함하도록 지시하는 명령
			taglib	-	사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
			
			1. page 명령
				==> 지금 작성하는 문서 자체에 특성이나 처리 방식을 지시하는 명령
				
					형식 ]
						<%@ page 속성=값 속성=값 ... %>
						
					참고 ]
						속성이란?
						지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
						
						값이란?
						그 특성이나 처리방식에 대한 내용
						
						1) language
							==> 스크립트할 언어의 종류를 지정하는 속성
								지금까지는 오직 자바 언어만 허락하는 상태이다.
								생략하면 자동적으로 자바 언어를 스크립트해준다.
								
							예 ]
								<%@ page language="java" %>
								
						2) extends
							==> JSP는 실행을 하면 내부적으로 자바 클래스로 바뀌어서
								실행하도록 되어있다.
								(즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
									ASP, PHP 보다 실행속도가 빠르다는 장점을 가지고 있다.)
									
								이때 중간에서 만들어지는 클래스가 어떤 클래스를
								상속 받아서 만들지를 지정하는 속성이다.
								
								이미 JSP문서가 클래스로 변환될 때 HttpJspBase 클래스를
								상속 받도록 약속해 놓았다.
								자바는 다중 상속이 불가능하므로 필요없는 속성이다.
								생략하면 자동으로 HttpJspBase를 상속 받아준다.
								
							예 ]
								<%@ page language="java" extends="javax.servlet.jsp.HttpJsBase" %>
							
						3) import
							==> 스크립트 안에 자바적인 요소를 넣을 수 있는데
								이때 사용하는 자바적인 요소가 특정 패키지 소석이면
								자바와 동일하게 반드시 import 시켜야 한다.
								그 작업을 해주는 속성이다.
								
							예 ]
								<%@ page import="java.util.*" %>
							
							참고 ]
								사용할 패키지가 여러개인 경우
								따로 임포트 해도 되고
								한번에 여러개를 import 시킬 수 있다.
								
								예 ]
									<%@ page import="java.util.*, java.text.*" %>
						
						4) session
							==> 세션의 사용 여부를 판단하도록 하는 속성
								생략하면 세션을 사용하도록 한다.(깁노이 true 이다.)
								
							예 ]
								<%@ page session="true" %>
									
						5) buffer
							==> 내부적으로 버퍼를 사용할지 여부와
								버퍼의 크기를 얼마로 할지 여부를 지정하는 속성
								생략하면 기본적으로 8KByte를 버퍼로 사용하도록 해준다.
							
							예 ]
								<%@ page buffer="none" %>
								==> 버퍼를 사용하지 않겠다는 선언...
								
								<%@ page buffer="16K" %>
								==> 버퍼의 크기를 16KByte로 지정
								
							참고 ]	
								버퍼란?
									클라이언트에게 서버가 응답을 할 때 처리 속도를
									빠르게 하기 위해서 중간에 버퍼를 사용해서
									데이터를 모았다가 한번에 출력하는 개념이다.
									
						6) autoFlush
							==> 자동 flush 기능을 사용할지 여부를 지정하는 속성
								생략하면 true가 적용되어서 자동 flush 기능이 실행된다.
								
							예 ]
								<%@ page autoFlush="true" %>
								
							참고 ]
								만약 속성값을 false로 지정하면
								강제로 반드시 flush 시켜주어야 한다.
								
						7) isTreadSafe
							==> 스레드 처리를 할 때 동기화 처리 여부를 설정하는 속성
								생략하면 자동 동기화 처리를 하도록 한다.
								
							예 ]
								<%@ page isTreadSafe="true" %>
								
							참고 ]
								JSP는 모든 문서가 자동 스레드 처리가 된다.
								즉, 여러 클라이언트가 동시에 접속을 하더라도
								스레드 처리를 해서 응답하도록 되어있다.
						
						8) info
							==> 주석문에 해당하는 것으로
								실행에는 아무런 상관이 없고 다만
								문서에 대한 정보(주석)을 달고 싶을 때 사용하는 속성
								
							예 ]
								<%@ page info="커피농장 사주세요~~!" %>
								
						9) errorPage
							==> JSP 문서를 실행하는 도중 문제(Exception)가 발생하면
								그 문서로는 응답할 수 없다.
								그래서 대신 응답할 다른 문서를 지정하는 속성
								
							예 ]
								<%@ page errorPage="error01.jsp" %>
								==> 에러가 발생하면 대신 error01.jsp 로
									클라이언트에게 응답해주세요. 라는 의미...
									
						10) isErrorPage
							==> 지금 만들고 있는 문서가 에러페이지용 문서인지를 지정하는 속성
							
							예 ]
								<%@ page isErrorPage="true" %>
								
						11) contentType
							==> 실행결과의 응답 방식을 지정하는 속성
							
							참고 ]
								실행결과 탄생하는 문서의 종류를 지정할 수 있다.
								이때 응답문서의 종류를 MINE Type으로 지정해야 한다.
								
							예 ]
								<%@ page contentType="text/html" %>
								==> 응답 문서를 html 문서로 만들어주세요...
								
							참고 ]
								이 속성에는 한글 인코딩 방식도 같이 지정할 수 있다.
								
								형식 ]
									<%@ page contentType=text/html; charset=UTF-8" %>
				
							참고 ]
							
						12) pageEncoding
							==>
							
							예 ]
								<%@ page pageEncoding="UTF-8 %>
							
							참고 ]
								contentType 속성에서 한글 인코딩을 같이 지정할 수 있으므로
								생략해도 무방하다.
							
---------------------------------------------------------------------------------------------

참고 ]
	WebContent 폴더 하위는 폴더의 개념으로 만들어야 한다.
	Java Resource 폴더 하위는 패키지 개념으로 만들어야 한다.			
							














