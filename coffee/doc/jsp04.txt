4. session
	==> 세션을 관리하는 내장 객체
		
		HttpSession 이라는 클래스를 이용해서 만들어진 내장객체
	
5. application
	==> 서버 전체를 관리하는 내장 객체
	
		ServletContext 라는 클래스를 이용해서 만들어진 내장 객체
		
6. page
	==> 그 문서 자체를 관리하는 내장 객체
	
		PageContext라는 클래스를 이용해서 만들어진 내장 객체
		
=================================================================================

내장 객체의 영역
==> 내장 객체를 이용하면 데이터를 보관하고 사용할 수 있다.
	즉, 서버 스스로가 필요한 데이터를 보관했다가 사용할 수 있다는 말이다.
	
	물론 자바적으로 변수에 기억해 놓았다가 사용해도 되지만
	==> 자바에서 변수로 만들게 되면
		거의 징겨변수로 만들어지므로
		같은 지역(문서)에서만 사용할 수 밖에 없는 문제점이 발생한다.
	좀더 다양한 문서에서 데이털르 공유할 수 있는 기능을 제공하고 있다.
	
	문제는 내장객체를 무엇을 사용해서 데이터를 기억했는가에 따라서
	그 데이터를 사용할 수 있는 영역이 달라진다.
	라는 것이고 이것은 우리는 내장 객체의 영역이라고 표현한다.
	
	예 ]
		request.setAttribute(); ==> 속성을 추가해주는 함수
		==> 이렇게 데이터를 기억하면
			이것은 요청이 유지되는 상태에서는 그 데이터를 사용할 수 있다.	
			
		session.setAttribute(); ==> 세션객체에 속성을 추가
		==> 이렇게 데이터를 기억하면
			이것은 세션이 유지되는 상태에서는
			그 데이터를 사용할 수 있게된다.
			
	1) pageContext
		==> 같은 문서 안에서만 그 데이터를 사용할 수 있다.
			==> 이것은 거의 사용하지 않는다.
				왜?
					변수로 기억하는 것과 동일하기 때문에....
	
	2) request
		==> 요청이 유지되는 문서에서 그 데이터를 사용할 수 있다.
			<== forward로 뷰를 부른 경우
			
	3) session
		==> 같은 세션을 유지한 문서에서 그 데이터를 사용할 수 있다.
		
	4) application
		==> 같은 서버를 사용하는 문서에서 그 데이터를 사용할 수 있다.
			웹 서버는 각각의 클라이언트에 독립적으로 응답하는 것이 일반적이다.
			즉, 다른 클라이언트의 요청과 상관없이
			그 클라이언트가 요청한 문제점을 해결하는 것이 일반적이다.
			굳이 모든 문서에서 동일한 데이터를 사용할 일은 거의 존재하지 않는다.
			
	참고 ]
		데이터를 입력하는 기능
			setAttribute("키값", 데이터);	==> 마치 Map 처럼 데이터를 입력하면 된다.
			
		데이터를 꺼내는 기능
			getAttribute("키값");			==> 마치 Map에서 get() 처럼 사용하면 된다.
			
===========================================================================================

액션태그
==> JSP는 HTML 언어를 기반으로해서
	필요한 위치에 자바적인 요소를 스크립트하는 방식으로
	만들어지는 언어이다.
	그러다보니
	HTML은 태그를 중심으로 제작되고
	자바 코드는 <% %>를 이용해서 처리하므로
	조금은 불편함이 있다.
	
	자주 사용하는 +6자바적인 기능을 HTML 처럼(태그방식) 사용할 수 있도록
	만들어 놓은 보조적인 명령을 말한다.
	
	1. forward를 대신하는 액션태그
	
		형식 1 ]
		
			<jsp:forward page="대신응답할 문서이름" />
			==> 단순히 보여줄 페이지만 변경하는 것
		
		형식 2 ]
		
			<jsp:forward page="대신응답문서">
				<jsp:param name="키값" value="데이터" scope="????" />
			</jsp:forward>
			==> 보여줄 페이지를 변경하면서 부가 정보를 알려준다.
			
		참고 ]
		
			액션태그는 xhtml을 기반으로 제작된 태그이다.
			따라서
			
				몸체가 있는 태그
					<태그이름>
						내용
					</태그이름>
				
				몸체가 없는 태그
					<태그이름 />
	
	2. 다른 문서를 포함시키는 기능을 가신 액션 태그
		( ==> <%@ include file="????" %> 과 비슷한 역할을 하는 태그이다. )
		
		형식 ]
		
			<jsp:include page="합칠문서이름" />
		
		주의 ]
			<%@ include file="????" %>
			==> 먼저 합치고 클래스를 만든다.
				따라서 합쳐졌을때 충돌나지 않도록 주의해야 한다.
				
			<jsp:include page="????" />
			==> 각각의 jsp 문서를 클래스로 만들어서 실행한 후
				실행 결과만 합치게 된다.
				따라서 따로 컴파일되므로 충돌날 염려가 없다.
				
==========================================================================================

요청설계
==> 한 요청에 해당하는 정보를 기록하는 설계도와 같은 문서

형식 ]
	파일확장자 또는 작성 프로그램이 따로 있는 것이 아니고
	쉽게 작성할 수 있는 도구를 사용하면 된다.
	반드시 포함해야할 항목이 있다.
	
	작성형식 ]
	
		요청내용 : 요청주소
		파라미터 : 넘겨야할 데이터들...
		컨트롤러 : 자바에서 요청을 처리할 서블릿 클래스 경로
		뷰		 : 요청이 왔을 경우 보여줘야할 뷰 파일(JSP 파일) 경로
		
===========================================================================================

JSP 지시자
	1. page
	2. include
	3. taglib
	
JSTL(Java Standard Tag Library)
==> JSP 제작하다보면 HTML 과 자바가 혼용되어 만들어진다.
	그래서 자바적인 내용을 입력하는 경우
	스크립트 릿(<% %>)을 사용해서 입력하게 된다.
	==> 이것은 개발자가 뷰 문서를 제작할 때 항상 고민되는 부분이다.
	
	JSTL이란?
	JSP는 HTML(태그를 이용한 문서작업)이 우선되므로
	자바적인 요소 역시 태그 형식으로 사용할 수 있도록 해서 
	(그러면 문서를 작성하는 사람이 한가지 형식으로만 만들 수 있으므로)
	통일된 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리
	
	예	]
		어제까지는
		<%
			for(int i = 0 ; i < 10 ; i++ ) {
		%>
			태그작업하고....
		<%
			}
		%>
		
		JSTL에서는
		
			<c:forEach var="data" items="$(LIST}">
				태그작업하고...
			</c:forEach>

JSTL 사용방법
	1. JSTL 라이브러리를 다운 받아서 프로젝트의
		WebContent/WEB-INF/lib에 복사해 놓는다.
		
		필요한 라이브러리
			jstl.jar, jstl-api.jar( 또는 standard.jar) 두개를 다운 받아서 붙여넣는다.
			
		이 라이브러리는 JSP 문서를 제작할 때 필요한 라이브러리 이므로
		반드시
			WebContent/WEB-INF/lib
		폴더에 복사되어야 한다.
		
		참고 ]
			JavaBuild Path에 등록되는 라이브러리는
			자바 클래스가  사용할 목적의 라이브러리 이다.
			
		참고 ]
			JSTL의 종류
				
				1) Core Tag
					==> 일반적인 자바 명령을 태그로 만들어 놓은 라이브러리
					
				2) Fomatting Tag
					==> 출력할 때 출력형태를 지정하기 위한 기능을 태그로 만들어 놓은 라이브러리
					
				3) Function Tag
					==> 자바에서 자주 사용하는 함수를 사용할 수 있도록 만들어 놓은 라이브러리
					
				4) SQL Tag
					==> 데이터베이스를 사용할 때 필요한 기능을 태그로 만들어놓은 라이브러리
					
				5) XML Tag
					==> xml 문서 처리를 위한 기능을 태그로 만들어 놓은 라이브러리
		
	2. JSTL이 필요한 문서(JSP)에 5가지중 필요한 라이브러리를 사용할 수 있도록 등록한다.
		==> 이 작업은 모든 JSP 문서에서 매번 해줘야 한다.
		
		형식 ]
			<%@ taglib prefix="???" uri="??????" %>
			
			prefix	==> 아무것이나 써도 된다.
						이것의 의미는
						taglib는 누군가가 만들어 놓은 태그를 사용하도록 하는 명령이다.
						이때 자바는 오픈소스이므로
						라이브러리를 아무나 만들수 있고 배포할 수 있다.
						이때 문제점은 태그이름이 중복될 수 있다.
						
						태그를 사용하는 사용자가 각각의 태그를 구분하기 위해 부여한 자신만의 규칙이다.
						
			uri		==> 이 태그 라이브러리를 제공하는 CDN 네트워크 경로
						또는
						태그 라이브러리 기능을 제공하는 클래스 이름을 지정하는 부분	
						
			예 ]
				곽채원	
					<coffee></coffee>
					
				한수연
					<coffee></coffee>
					
				이 경우
					곽채원씨가 만든 태그 prefix="g"
					한수연씨가 만든 태그 prefix="h"
					
				사용할 때
					한수연씨가 만든 태그를 사용해야하는 경우
						<h:coffee>내용</h:coffee>
					곽채원씨가 만든 태그를 사용해야하는 경우
						<g:coffee>내용</g:coffee>
						
	불문율
		1. Core
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
			
		2. Formatting
			<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
			
		3. Function
			<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
			
		4. SQL
			<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
		
		5. XML
			<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>	
			
===========================================================================================

기능

1. 표현언어(Expression Language / EL)
	
	형식 ]
			${출력내용}
		
	의미 ]
			출력할 내용을 화면에 출력한다.
			출력할 내용은 변수, 연산식, 상수 등 거의 모든 것이 올 수 있다.
	예 ]
		컨트롤러에서 req.setAttribute("NAME", "김기은");
		이라고 리퀘스트 객체에 데이터를 추가하면
		이 데이터를 사용할 때는
			1. 
				request.getAttribute("NAME");
			
			2. 표현언어에서 사용하는 방법
				${NAME}
-------------------------------------------------------------------------------------------
	
	참고 ]
		스크립트 방식의 종류
			<%
				# 스크립트 릿 방식
				일반적인 자바코드가 작성이 되면 된다.
				이때 작성된 자바 코드는 service() 함수 내에 기술이 된다.
				따라서 이 위치에 만드는 변수는 모두 지역변수가 되고
				이 위치에 절대로 함수를 만들 수 없다.
			%>
			
			<%!
				# 선언자 방식
				변수 선언
				함수 선언
				일반명령은 절대 올 수 없다.
			%>
			
			<%=
				# 표현자 방식
				out 객체와 같은 기능
				화면에 내용을 출력하는 기능
				내용은 오직 한개만 출력할 수 있다.
			%>
	
-------------------------------------------------------------------------------------------
	
2. <c:out>
	==> 표현언어와 동일하게 뭔가를 출력하는 기능을 가진 태그이다.
		
	형식 ]
		
		<c:out value="출력할 내용" />
		
	예 ]
	
		컨트롤러에서 req.setAttribute("NAME", "김기은");
		이라고 리퀘스트 객체에 데이터를 추가하면
		이 데이터를 <c:out> 태그로 사용할 때는
			
			<c:out value="${NAME}" />
			
	장점 ]
		
		동시에 여러개를 출력할 수 있다.
		즉, 스스로가 여러개를 하나의 문자열로 결합해서 출력한다.
		
	예 ]
		<c:out value="${'<tag>, 10'}" />
		
		실행결과
		==>		<tag>, 10
	
3. <c:set>
	==> 변수에 데이터를 기억해 놓는 기능을 가진 태그이다.
	
	형식 ]
		
		<c:set var="변수이름" value="데이터" />
		
	예 ]
		
		<c:set var="name" value="김기은" />
		==> String name = "김기은"; 과 같은 의미이다.
		
		따라서 입력해놓은 변수를 사용하려면
		==>
			${name} ===> 김기은
			
	참고 ]
		기억할 데이터는 어떤 타입이던지 상관이 없다.
		
4. <c:remove>
	==> 변수의 데이터를 강제로 삭제하는 기능을 가진 태그
	
	형식 ]
		
		<c:remove var="변수이름" />
		
5. <c:if>
	==> 자바의 if 명령에 해당하는 기능을 가진 태그이다.
	
	형식 ]
		
		<c:if test="조건식">
			몸체....
		</c:if>
		==> 조건식이 참이면 몸체 부분을 실행하세요...
		
	참고 ]
		아직까지는 else, else if 명령에 해당하는 기능은 존재하지 않는다.
		따라서
		만약 else 구문이 필요하면 앞의 조건식의 반대 조건식을 이용해서
		다시 if 태그로 처리해야 한다.
		
	JSTL 에서는 조건식을 만들때 조건 연산자를 자바에서 사용하는 조건연산자를 이용할 수도 있고
	JSTL 연산자를 이용할 수도 있다.
	
		eq		==
		lt		<
		gt		>
		le		<=
		ge		>=
		ne		!=
		
		and		&&
		or		||
		not		!
		
		empty	데이터가 비어있는가???
		
		예 ]
			
			ArrayList list = new ArrayList();
			
			최종적으로
			request.setAttribute("LIST", list);
			
			사용할 떄는
			
				<c:if test=${empty LIST}">
				==> LIST가 비어있지 않으면 실행하지 않는다.	
					내용...
				</c:if>
	
6. <c:choose>
	==> 자바의 switch case와 유사한 기능을 가진
		다중 조건 처리 명령을 위한 태그
		
	형식 ]
		
		<c:choose>
			<c:when test="조건식1">
				처리내용
			</c:when>
			<c:when test="조건식2">
				처리내용
			</c:when>
			<c:when test="조건식3">
				처리내용
			</c:when>
			<c:otherwise>
				처리내용
			</c:otherwise>
		</c:choose>
		
	참고 ]
		한개라도 c:when이 맞으면 그것만 처리하고
		c:choose를 종료한다.
		
7. <c:forEach>
	==> 자바의 for 명령을 태그로 만들어 놓은 기능
	
	형식 1 ]
		
		<c:forEach var="변수이름" begin="시작값" end="종료값" step="증감값">
			처리내용...
		</c:forEach>
		
		예 ]
		
			for(int dap = 1 ; dap < 10 ; dap++ ) {}
			
			==>
			<c:forEach var="dap" begin="1" end="9" step="1">
			</c:forEach>
			
		주의 ]
			end 속성은 포함되는(==) 개념이다.
			
		참고 ]
			step이 1인 경우는 생략해도 무방하다.
			
	형식 2 ]
		
		<c:forEach var="변수" items="컬렉션 또는 배열">
		</c:forEach>
		==> 자바의 향상된 for 명령에 해당하는 것으로
			컬렉션이나 배열의 내용이 변수에 한개씩
			기억되면서 데이터 갯수만큼 반복하는 것이다.
			
	참고 ]
		forEach 태그에는 varStatus라는 속성을 사용할 수 있다.
		이 속성은 반복상태를 기억하는 역할을 담당한다.
		
		예 ]
			
			<c:forEach var="???" items="#{??????}" varStatus="변수1">
				변수1에는 반복상태가 기억된다.
			</c:forEach>
			
			반복상태
				current		: 현재 꺼낸 데이터가 기억된다.
				index		: 현재 몇번째 반복인지 기억된다.
								0부터 카운트 된다.
				count		: 현재 몇번째 반복인지 기억된다.
								1부터 카운트 된다.
				first		: 현재 반복이 첫 반복인지 아닌지를 참 또는 거짓으로 기억한다.
				last		: 현재 반복이 마지막 반복인지 아닌지를 참 거짓으로 기억
				begin		: 시작값
				end			: 종료값
				step		: 증감값을 기억
				
		사용 예 ]
		
			<c:forEach var="data" items="${LIST}" varStatus="st">
				// 횟수를 출력하고 싶으면 ==>
				${st.count}
			</c:forEach>

8. <c:forTokens>
	==> 하나의 문자열을 지정한 기호로 분리시켜서 반복하는 태그
		자바로 비유하자면 StringTokenize와 비슷한 역할을 한다.
		
	형식 ]
		
		<c:forTokens var="변수" items="데이터" delims="구분자">
		<c:forTokens>
		
9. <:redirect>
	==> 강제로 요청을 변경하는
		response.sendRedirect() 함수와 같은 기능을 하는 태그
		
	형식 1 ]
	
		<c:redirect url="새로운요청" />
		==> 일반적인 요청
		
	형식 2 ]
		
		<c:redirect url="새로운요청">
			<c:param name="키값" value="데이터" />
			...
		</c:redirect>
		==> 요청을 하면서 부가 정보를 제공하는 방식
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	